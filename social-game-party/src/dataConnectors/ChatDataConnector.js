import DataConnector from "@/dataConnectors/DataConnector";
import * as sgf from "@/logic/socialGameFramework.js";

/**
 * DataConnector for interacting with "Chat".
 */
export default class ChatDataConnector extends DataConnector {

    constructor() {
        super();
    }

    //Chat Section--------------------------------

    //ChatRoom Information
    chatRoomInfo = {
        chatRoomCollection: "chatRooms",
    };

    //Stores the unsubscribe function generated by firestore when we setup a listener.
    unsubscribeToChatFunc = null;

    /**
     * Set the firestoreDb to monitor the chat room document for updates.    
     * @param {string} roomName - room to listen to, if empty we use the global chat
     * @param {function} onSnapshotFunction - function to run if the document we listen to is updated, this function expects the new chatText as a param.
     */
    listenToChatRoom = function (roomName, onSnapshotFunction) {

        let col = this.chatRoomInfo.chatRoomCollection;

        //Unsubscribe if needed to avoid stacking multiple listeners.
        if (this.unsubscribeToChatFunc)
            this.unsubscribeToChat();

        //subscribe/listen to room test doc
        this.unsubscribeToChatFunc = this.firestoreDb
            .collection(col)
            .doc(roomName)
            .onSnapshot(function (doc) {

                let docData = doc.data();

                if (docData) {
                    let remoteChatText = docData.chatText;
                    onSnapshotFunction(remoteChatText);
                }

            });
    };

    /**
     * If we are current listening to a chat, unsubscribe from it.
     */
    unsubscribeToChat = function () {
        if (this.unsubscribeToChatFunc) {
            this.unsubscribeToChatFunc();
            sgf.mainFramework.megaLog("Unsubscribed to chat!");
            this.unsubscribeToChatFunc = null;
        }
        else
            sgf.mainFramework.megaLog("Nothing to unsubscribe from!");
    }

    /**
    * Set the chat room text.
    * @param {string} roomName - room update, if empty we use the global chat
    * @param {string} newChatText append this to the chatRooms chatText.
    */
    updateChatRoomText = function (roomName, newChatText) {

        let col = this.chatRoomInfo.chatRoomCollection;

        let chatRoomDocRef = this.firestoreDb.doc(`${col}/${roomName}`);
        this.firestoreDb.runTransaction(function (transaction) {
            return transaction.get(chatRoomDocRef).then(function (chatRoomDoc) {

                let docData = chatRoomDoc.data();

                if (docData) {
                    docData.chatText += newChatText;
                    transaction.update(chatRoomDocRef, docData);
                }
                else {
                    transaction.set(chatRoomDocRef, {
                        chatText: newChatText
                    });
                }
            })
        })

    };

    //TODO: TEST BEFORE USING - This is untested...
    /**
     * Delete the specified chatRoom from the chatRooms collection.
     * @param {string} roomName 
     */
    deleteChatRoom = function (roomName) {
        let col = this.chatRoomInfo.chatRoomCollection;
        this.firestoreDb.collection(col).doc(roomName).delete()
            .then(
                sgf.mainFramework.megaLog(`ChatRoom "${roomName}" has been deleted. `)
            ).catch(err => {
                sgf.mainFramework.megaLog("There was an issue deleting the ChatRoom: " + err);
            });

    }

}