import DataConnector from "@/dataConnectors/DataConnector";

/**
 * DataConnector for interacting with "Chat".
 */
export default class ChatDataConnector extends DataConnector {

    constructor() {
        super();
    }

    //Chat Section--------------------------------

    //Default Global Chat Room
    chatRoomInfo = {
        chatRoomCollection: "chatRooms",
        chatRoomDoc: "globalChatRoom"
    };

    //Stores the unsubscribe function generated by firestore when we setup a listener.
    unsubscribeToChatFunc = null;

   /**
    * Set the firestoreDb to monitor the chat room document for updates.    
    * @param {string} roomName - room to listen to, if empty we use the global chat
    * @param {function} onSnapshotFunction - function to run if the document we listen to is updated, this function expects the new chatText as a param.
    */
    listenToChatRoom = function (roomName, onSnapshotFunction) {

        //Use the chat room info to get global chat collection and document if a roomname isn't provided
        let col = this.chatRoomInfo.chatRoomCollection, docu = this.chatRoomInfo.chatRoomDoc;
        let hasRoom = roomName && roomName != "";

        if (hasRoom) {
            col = "rooms";
            docu = roomName;
        }

        //Unsubscribe if needed to avoid stacking multiple listeners.
        if (this.unsubscribeToChatFunc)
            this.unsubscribeToChat();

        //subscribe/listen to room test doc
        this.unsubscribeToChatFunc = this.firestoreDb
            .collection(col)
            .doc(docu)
            .onSnapshot(function (doc) {
                let remoteChatText = doc.data().chatText;
                onSnapshotFunction(remoteChatText);
            });
    };

    /**
     * If we are current listening to a chat, unsubscribe from it.
     */
    unsubscribeToChat = function () {
        if (this.unsubscribeToChatFunc) {
            this.unsubscribeToChatFunc();
            console.log("Unsubscribed to chat!");
            this.unsubscribeToChatFunc = null;
        }
        else
            console.log("Nothing to unsubscribe from!");
    }

    /**
    * Set the chat room text.
    * @param {string} roomName - room update, if empty we use the global chat
    * @param {string} newChatText set chatText in the FireStore Db to this.
    */
    updateChatRoomText = function (roomName, newChatText) {

        //Use the chat room info to get global chat collection and document if a roomname isn't provided
        let col = this.chatRoomInfo.chatRoomCollection, docu = this.chatRoomInfo.chatRoomDoc;
        let hasRoom = roomName && roomName != "";

        if (hasRoom) {
            col = "rooms";
            docu = roomName;
        }

        //If in a room use a transaction and update.
        if (hasRoom) {
            let roomDocRef = this.firestoreDb.doc(`rooms/${roomName}`);
            this.firestoreDb.runTransaction(function (transaction) {
                return transaction.get(roomDocRef).then(function (roomDoc) {

                    let docData = roomDoc.data();
                    docData.chatText = newChatText;

                    transaction.update(roomDocRef, docData);

                })
            })
        }
        else {
            //Global chat is from the POC...just set the document with the new text.
            this.firestoreDb
                .collection(col)
                .doc(docu)
                .set({
                    chatText: newChatText
                })
                .then(success => {
                    console.log("Write Successful! :" + success);
                })
                .catch(err => {
                    console.error("There was a db write error:", err);
                });
        }
    };
}