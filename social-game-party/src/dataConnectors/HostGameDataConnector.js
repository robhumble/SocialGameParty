import DataConnector from "@/dataConnectors/DataConnector";
//import { SessionUser } from "@/logic/SessionInfo.js";


/**
 * Data connector for Game Data that the host needs to listen to.
 */
export default class HostGameDataConnector extends DataConnector {

  constructor() {
    super();
  } 

  #connectorCollectionName = "hostGameData";

  
  //General Functions--------------------------------------------


  makeHostGameData = async function (roomName) {

    let hostDataDbModel = this.buildHostGameDataDbModel();

    var existingDoc = await this.firestoreDb.collection(this.#connectorCollectionName).doc(roomName).get();

    if (existingDoc.data())
      throw Error("Document already exists!");

    // This line creates both the document and the data inside of it
    this.firestoreDb.doc(`${this.#connectorCollectionName}/${roomName}`).set(hostDataDbModel);

  };




 //Stores the unsubscribe function generated by firestore when we setup a listener.
 unsubscribeToHostGameDataFunc = null;

 
 listenToHostGameData = function (onSnapshotFunction, roomName) {

   //Don't subscribe to multiple rooms
   if (this.unsubscribeToHostGameDataFunc)
     this.unsubscribeToHostGameData();

   //While this should be a listener, I am concerned changes that aren't the userlist will be sent. 
   this.unsubscribeToHostGameDataFunc = this.firestoreDb
     .collection(this.#connectorCollectionName)
     .doc(roomName)
     .onSnapshot(function (doc) {

       let docData = doc.data();

       if (docData) {
         let remoteHostGameData = {      

          results = docData.results,          
          dynamicHostGameData: docData.dynamicHostGameData

         }
         onSnapshotFunction(remoteHostGameData);
       }
     });
 };

 unsubscribeToHostGameData = function () {
   if (this.unsubscribeToHostGameDataFunc) {
     this.unsubscribeToHostGameDataFunc();
     sgf.mainFramework.megaLog("Unsubscribed to HostGameData!");
     this.unsubscribeToHostGameDataFunc = null;
   }
   else
     sgf.mainFramework.megaLog("No HostGameData to unsubscribe from!");
 }

  /**
   * Delete the specified HostGameData from the HostGameData collection.
   * @param {string} roomName 
   */
  deleteHostGameData = function (roomName) {

    this.firestoreDb.collection(this.#connectorCollectionName).doc(roomName).delete()
      .then(
        sgf.mainFramework.megaLog(`HostGameData "${roomName}" has been deleted. `)
      ).catch(err => {
        sgf.mainFramework.megaLog("There was an issue deleting the HostGameData: " + err);
      });

  }



//Migrated from GamePlayDataConnector -------------------------------------->























  //Private Helpers-------------------------------------->

  buildHostGameDataDbModel = function () {
    let dbModel = {

      results = [],

      //This is a general container for data that needs to be stored by the current game.
      dynamicHostGameData: {},  //Dynamically generated data that only active players care about (probably private, and also only stuff that is relevant to other active players)
    }

    return dbModel;
  }

}