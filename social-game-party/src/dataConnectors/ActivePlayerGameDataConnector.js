import DataConnector from "@/dataConnectors/DataConnector";
//import { SessionUser } from "@/logic/SessionInfo.js";


/**
 * Data connector for Game Data that all players need to listen to.
 */
export default class ActivePlayerGameDataConnector extends DataConnector {

  constructor() {
    super();
  } 

  #connectorCollectionName = "activePlayerGameData";


  //General Functions--------------------------------------------


  makeActivePlayerGameData = async function (roomName) {

    let activeDataDbModel = this.buildActivePlayerGameDataDbModel();

    var existingDoc = await this.firestoreDb.collection(this.#connectorCollectionName).doc(roomName).get();

    if (existingDoc.data())
      throw Error("Document already exists!");

    // This line creates both the document and the data inside of it
    this.firestoreDb.doc(`${this.#connectorCollectionName}/${roomName}`).set(activeDataDbModel);

  };




 //Stores the unsubscribe function generated by firestore when we setup a listener.
 unsubscribeToActivePlayerGameDataFunc = null;

 
 listenToActivePlayerGameData = function (onSnapshotFunction, roomName) {

   //Don't subscribe to multiple rooms
   if (this.unsubscribeToActivePlayerGameDataFunc)
     this.unsubscribeToActivePlayerGameData();

   //While this should be a listener, I am concerned changes that aren't the userlist will be sent. 
   this.unsubscribeToActivePlayerGameDataFunc = this.firestoreDb
     .collection(this.#connectorCollectionName)
     .doc(roomName)
     .onSnapshot(function (doc) {

       let docData = doc.data();

       if (docData) {
         let remoteActivePlayerGameData = {
          //  users: docData.users,
          //  hostId: docData.hostId,
          //  spectatorGameData: docData.spectatorGameData,
          //  playerGameData: docData.playerGameData,

          //  currentInstructions: docData.currentInstructions,
          //  currentCheckInstructions: docData.currentCheckInstructions,

          currentInstructions: docData.currentInstructions,
          currentCheckInstructions: docData.currentCheckInstructions,

          dynamicPlayerGameData: docData.dynamicPlayerGameData,

         }
         onSnapshotFunction(remoteActivePlayerGameData);
       }
     });
 };

 unsubscribeToActivePlayerGameData = function () {
   if (this.unsubscribeToActivePlayerGameDataFunc) {
     this.unsubscribeToActivePlayerGameDataFunc();
     sgf.mainFramework.megaLog("Unsubscribed to ActivePlayerGameData!");
     this.unsubscribeToActivePlayerGameDataFunc = null;
   }
   else
     sgf.mainFramework.megaLog("No ActivePlayerGameData to unsubscribe from!");
 }

  /**
   * Delete the specified ActivePlayerGameData from the ActivePlayerGameData collection.
   * @param {string} roomName 
   */
  deleteActivePlayerGameData = function (roomName) {

    this.firestoreDb.collection(this.#connectorCollectionName).doc(roomName).delete()
      .then(
        sgf.mainFramework.megaLog(`ActivePlayerGameData "${roomName}" has been deleted. `)
      ).catch(err => {
        sgf.mainFramework.megaLog("There was an issue deleting the ActivePlayerGameData: " + err);
      });

  }


//Migrated from GamePlayDataConnector -------------------------------------->

























  //Private Helpers-------------------------------------->



  buildActivePlayerGameDataDbModel = function () {
    let dbModel = {

      //STUFF THAT SHOULD STAY IN THE ROOM ---------------------------------------------

      //users: userArr, //Users in the room      
      
      //Game specific dynamically generated data
      //spectatorGameData: {},  //Dynamically generated data that spectators (and anyone in the room) cares about
      //playerGameData: {},  //Dynamically generated data that only active players care about (probably private, and also only stuff that is relevant to other active players)

      //HOST SHOULD BE KNOWN BY EVERYONE INCLUDING SPECTATORS
      //hostId: null,   //The games host user - basically a player that will act as the server

      //STUFF THAT WE WANT IN ACTIVE PLAYER GAME DATA---------------------------------------------
      

      //Game Instructions
      currentInstructions: null,  //Instructions on what the player should be seeing/doing - this may be "show a loading screen" OR "Loop through questions and answer them"
      currentCheckInstructions: null,  //Instructions for the host to check for a certain scenario and then do a specified action 

      //Used to be game data - this is a general container for data that needs to be stored by the current game.
      dynamicPlayerGameData: {},  //Dynamically generated data that only active players care about (probably private, and also only stuff that is relevant to other active players)
    }

    return dbModel;
  }


}